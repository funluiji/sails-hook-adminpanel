mixin fieldWidget(key, field, value, instance)
  if (typeof value === 'undefined' && typeof field.model.defaultsTo !== 'undefined')
    - value = field.model.defaultsTo

  .form-group
    label(for='form-#{key}').col-md-4.control-label #{field.config.title}
    .col-md-8
      if locals.adminpanel.configHelper.isId(field, instance.config.model)
        - field.config.disabled = true; //Disable identifier field
        +inputText(key, field, value)
      else
        - var type = field.config.type || field.model.type
        case type
          when 'association_many'
            +inputChosen(key, field, value)
          when 'association'
            +inputModel(key, field, value)
          when 'string'
            +inputText(key, field, value)
          when 'password'
            +inputPassword(key, field, value)
          when 'date'
            +inputDate(key, field, value)
          when 'datetime'
            +inputDatetime(key, field, value)
          when 'integer'
            +inputNumber(key, field, value)
          when 'float'
            +inputNumber(key, field, value)
          when 'number'
            +inputNumber(key, field, value)
          when 'boolean'
            +inputCheckbox(key, field, value)
          when 'text'
            +textarea(key, field, value)
          default
            +inputText(key, field, value)

mixin inputText(key, field, value)
  if field.model.enum
    +select(key, field, value)
  else if field.model.email
    input(type='email', name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false, value=value).form-control
  else if field.config.file
    input(type='file', name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false, value=value).form-control
  else
    input(type='text', name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false, value=value).form-control

mixin inputPassword(key, field, value)
  input(type='password', name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false value=value).form-control

mixin inputDate(key, field, value)
  input(type='date', name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false, value=value).form-control

mixin inputDatetime(key, field, value)
  input(type='datetime', name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false, value=value).form-control

mixin inputNumber(key, field, value)
  input(type='number', name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false value=value).form-control

mixin inputCheckbox(key, field, value)
  .checkbox
    input(type='checkbox', name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false value='1', checked=value)

mixin select(key, field, value)
  select(name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false).form-control
    if (field.config.enum && typeof field.config.enum === 'object')
      each opt, optKey in field.config.enum
        option(value=optKey, selected=(optKey == value)) #{opt}
    else
      each opt in field.model.enum
        option(value=opt, selected=(opt == value)) #{opt}

mixin textarea(key, field, value)
  textarea(name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false) #{value}


mixin inputModel(key, field, value)
  //model-select(name=key, required=field.config.required || false, disabled=field.config.disabled || false, value=value)
  select(name=key, id='form-#{key}', required=field.config.required || false, disabled=field.config.disabled || false).form-control
    if !field.config.required
      option(value='') --- Select please ---
    if field.config.records
      each opt in field.config.records
        option(value=opt[field.config.identifierField],
                selected=(opt[field.config.identifierField] == value)) #{opt[field.config.displayField]}
    else
      option(value='') --- No records found ---

//|!{JSON.stringify(field.config)}
mixin inputChosen(key, field, value)
  select.chosen-select(name=key, id='form-#{key}', data-placeholder="--- Select please ---", multiple, required=field.config.required || false, disabled=field.config.disabled || false).form-control
    if field.config.records
      each opt in field.config.records
        if(value && value.length>0)
          -var selected = false
          each val in value
            if opt[field.config.identifierField] == val[field.config.identifierField]
              -selected = true
          option(value=opt[field.config.identifierField],  selected=selected)
            if field.config.advancedDisplayField
              +queryValue(opt, field.config.advancedDisplayField)
            else
              | #{opt[field.config.displayField]}
        else
          option(value=opt[field.config.identifierField])
            if field.config.advancedDisplayField
              +queryValue(opt, field.config.advancedDisplayField)
            else
              | #{opt[field.config.displayField]}
    else
      option(value='') --- No records found ---
  if field.config.order_model
    input(type='hidden', value=field.config.order_model, id='form-#{key}-hidden').form-control
mixin installEditors(fields)
  script(type='text/javascript')
  each field, key in fields
    if field.config.editor
        | CKEDITOR.replace( 'form-#{key}' );mixin installEditors(fields)
mixin queryValue(obj, path)
  if path
     - var sections = path.toString().split(".")
      each section in sections
          - obj = obj[section];
      |#{obj}
mixin setupChosen()
  script(type='text/javascript').
    var chosenOrderedSelection
    $(document).ready(function () {
      var dict = {};
      $(".chosen-select").chosen({width: "95%"});
      $(".chosen-select").each(function(index){
        var hdId = this.id + "-hidden";
        var hiddenInput = $("#" + hdId);
        if (!hiddenInput) {
          return;
        }
        var orderedInput = $("#" + "form-" + hiddenInput.val());
        if (!orderedInput) {
          return;
        }
        if(orderedInput.val()) {
          dict[hdId] = JSON.parse(orderedInput.val());
        }

      });
      $(".chosen-select").on('change', function (e, params) {
        console.log(params);
        var hdId =  e.target.id + "-hidden";
        var hiddenInput = $("#" + hdId);
        if(!hiddenInput){
          return;
        }
        var orderedInput = $("#" + "form-" + hiddenInput.val());
        if(!orderedInput){
          return;
        }
        if(dict[hdId] === undefined) {
          dict[hdId] = [];
        }

        if (params.selected) {
          dict[hdId].push(params.selected);
        }else if(params.deselected) {
          var index = dict[hdId].indexOf(params.deselected);
          if (index > -1) {
            dict[hdId].splice(index, 1);
          }

        }

        orderedInput.val(JSON.stringify(dict[hdId]));
      });
    })
